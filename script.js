const storyTree = {
  "start": {
    "narrative": "The door to the hotel room clicks shut behind you, the sound echoing like a final verdict in a courtroom. The air is thick with the scent of cheap cologne and lingering cigarette smoke, the kind that clings to secrets and bad decisions. You, [protagonist-name], stand there in your rumpled detective coat, the badge on your belt feeling heavier than ever with each passing case. The fabric brushes against your skin, a reminder of the countless nights spent chasing shadows. Across the room, [partner-name] leans against the window, [partner-gender-pronoun] silhouette framed by the neon glow piercing through the grimy glass from the city below—a restless urban beast that never sleeps. [partner-name-pronoun] not the person you remember from the academy; [partner-gender-pronoun] features are hardened now, eyes shadowed by years of undercover work, carrying the weight of demons only the two of you understand. \"You shouldn't be here,\" [partner-name] murmurs, [partner-gender-pronoun] voice a low, gravelly rumble that sends a shiver racing down your spine, igniting a spark of forbidden familiarity. But you both know why you are. The case that bound you together—a relentless string of disappearances in the city's underbelly—has led to this charged moment, where the thin lines between duty and desire blur into a dangerous haze.",
    "choices": [
      {"text": "Give in to the moment and kiss [partner-name], letting passion take over.", "next": "dynamic"},
      {"text": "Pull away and insist on discussing the case evidence first.", "next": "dynamic"},
      {"text": "Suggest leaving the room to find a safer place to talk.", "next": "dynamic"}
    ]
  }
  // Dynamic branches will be generated by AI
};

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('story-setup-form');
  if (form) {
    form.addEventListener('submit', (event) => {
      event.preventDefault();
      try {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        localStorage.setItem('storyConfig', JSON.stringify(data));
        sessionStorage.setItem('currentNode', 'start');
        window.location.href = 'engine_latest.html';
      } catch (error) {
        console.error('Error processing form:', error);
        alert('Something went wrong. Please try again.');
      }
    });
  }

  const storyContent = document.getElementById('story-content');
  const choicesDiv = document.getElementById('choices');

  if (storyContent && choicesDiv) {
    const config = JSON.parse(localStorage.getItem('storyConfig') || '{}');
    let currentNode = sessionStorage.getItem('currentNode') || 'start';
    let storyState = JSON.parse(sessionStorage.getItem('storyState') || '{}');

    // Immediate render on load with fallback
    if (!config || Object.keys(config).length === 0) {
      storyContent.innerHTML = '<p>No story configuration found. Please set up your adventure on the setup page.</p>';
      choicesDiv.innerHTML = '';
    } else {
      renderNode(currentNode, config, storyState);
    }

    choicesDiv.addEventListener('click', (event) => {
      if (event.target.tagName === 'BUTTON') {
        const next = event.target.dataset.next;
        const choiceText = event.target.textContent;
        sessionStorage.setItem('currentNode', next);
        choicesDiv.innerHTML = ''; // Clear choices immediately
        generateDynamicNode(next, config, choiceText); // Generate new content
      }
    });
  }

  function renderNode(nodeId, config, storyState) {
    const node = storyTree[nodeId] || { narrative: storyState.narrative || 'No narrative available.', choices: [] };
    let narrative = node.narrative;
    narrative = narrative.replace('[protagonist-name]', config['protagonist-name'] || 'Traveler');
    narrative = narrative.replace('[partner-name]', config['partner-name'] || 'Partner');
    narrative = narrative.replace('[partner-gender-pronoun]', getPronoun(config['partner-gender'] || 'no-preference'));
    narrative = narrative.replace('[partner-name-pronoun]', getSubjectPronoun(config['partner-gender'] || 'no-preference'));

    // Split narrative into words for typing effect
    const words = narrative.split(' ');
    storyContent.innerHTML = ''; // Clear previous content
    let index = 0;
    choicesDiv.style.display = 'none'; // Hide choices initially

    function typeNextWord() {
      if (index < words.length) {
        const span = document.createElement('span');
        span.textContent = words[index] + ' ';
        span.style.opacity = '0';
        span.style.transition = 'opacity 0.5s';
        storyContent.appendChild(span);
        setTimeout(() => {
          span.style.opacity = '1';
        }, 10); // Smooth fade-in
        index++;
        setTimeout(typeNextWord, 100); // 100ms per word
      } else {
        // Show choices only after all words are typed
        choicesDiv.style.display = 'block';
        renderChoices(node.choices);
      }
    }

    typeNextWord();
  }

  function renderChoices(choices) {
    choicesDiv.innerHTML = '';
    choices.forEach((choice, idx) => {
      const button = document.createElement('button');
      button.textContent = choice.text;
      button.dataset.next = choice.next;
      button.classList.add('choice-button');
      button.style.background = 'linear-gradient(90deg, #4a1a1a, #8a2b2b)';
      button.style.padding = '1.2rem 2rem';
      button.style.margin = '0.5rem 0';
      button.style.border = 'none';
      button.style.borderRadius = '10px';
      button.style.color = '#e0c0c0';
      button.style.fontSize = '1.2rem';
      button.style.cursor = 'pointer';
      button.style.transition = 'transform 0.3s, box-shadow 0.3s';
      button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
      button.onmouseover = () => {
        button.style.transform = 'scale(1.05)';
        button.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.5)';
      };
      button.onmouseout = () => {
        button.style.transform = 'scale(1)';
        button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
      };
      choicesDiv.appendChild(button);
    });
  }

  function generateDynamicNode(nodeId, config, previousChoice) {
    // Simulate AI generation (using Grok's capabilities)
    const riskLevel = config['emotional-risk'] || 'medium';
    const protagonist = config['protagonist-name'] || 'Traveler';
    const partner = config['partner-name'] || 'Partner';
    let pronoun = getPronoun(config['partner-gender'] || 'no-preference');
    let subjectPronoun = getSubjectPronoun(config['partner-gender'] || 'no-preference');
    let narrative = '';
    let choices = [];

    if (nodeId === 'dynamic') {
      switch (previousChoice) {
        case 'Give in to the moment and kiss [partner-name], letting passion take over.':
          narrative = `The tension breaks as you kiss ${partner}, a fiery passion igniting between you. ${pronoun} hands grip you tightly, the room fading into a haze of desire. But a sudden noise outside hints at danger creeping closer.`;
          choices = [
            {"text": `Deepen the kiss with ${riskLevel === 'raw' ? 'raw' : 'gentle'} passion.`, "next": "dynamic"},
            {"text": `Pause to listen for the noise with ${riskLevel === 'raw' ? 'edgy' : 'cautious'} curiosity.`, "next": "dynamic"},
            {"text": `Pull back and suggest moving to safety with ${riskLevel === 'raw' ? 'fierce' : 'calm'} urgency.`, "next": "dynamic"}
          ];
          break;
        case 'Pull away and insist on discussing the case evidence first.':
          narrative = `You step back from ${partner}, demanding to review the evidence. ${subjectPronoun} gaze hardens as you spread the files, the air thick with tension. A shadow moves past the window, unnoticed.`;
          choices = [
            {"text": `Analyze the evidence with ${riskLevel === 'raw' ? 'intense' : 'focused'} scrutiny.`, "next": "dynamic"},
            {"text": `Confront ${partner} about ${pronoun} reaction with ${riskLevel === 'raw' ? 'sharp' : 'firm'} words.`, "next": "dynamic"},
            {"text": `Check the window for the shadow with ${riskLevel === 'raw' ? 'bold' : 'wary'} eyes.`, "next": "dynamic"}
          ];
          break;
        case 'Suggest leaving the room to find a safer place to talk.':
          narrative = `You propose leaving with ${partner}, ${subjectPronoun} nod tinged with reluctance. The hallway looms dark and silent as you step out, the past haunting your steps.`;
          choices = [
            {"text": `Lead ${partner} to a hidden alley with ${riskLevel === 'raw' ? 'defiant' : 'bittersweet'} resolve.`, "next": "dynamic"},
            {"text": `Pause to secure the room before leaving with ${riskLevel === 'raw' ? 'aggressive' : 'careful'} intent.`, "next": "dynamic"},
            {"text": `Rush forward, seeking safety with ${riskLevel === 'raw' ? 'reckless' : 'desperate'} speed.`, "next": "dynamic"}
          ];
          break;
      }
    } else {
      narrative = storyTree[nodeId]?.narrative || `The story with ${partner} continues in unexpected ways...`;
      choices = storyTree[nodeId]?.choices || [
        {"text": `Explore a new path with ${riskLevel === 'raw' ? 'bold' : 'curious'} intent.`, "next": "dynamic"},
        {"text": `Retreat with ${riskLevel === 'raw' ? 'cautious' : 'hesitant'} care.`, "next": "dynamic"},
        {"text": `Charge ahead with ${riskLevel === 'raw' ? 'fierce' : 'determined'} resolve.`, "next": "dynamic"}
      ];
    }

    // Store the generated state
    const newState = { narrative, choices };
    storyState = { ...storyState, ...newState };
    sessionStorage.setItem('storyState', JSON.stringify(storyState));
    renderNode(nodeId, config, storyState);
  }

  function getPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'his';
      case 'female':
        return 'her';
      case 'no-preference':
      default:
        return 'their';
    }
  }

  function getSubjectPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'he';
      case 'female':
        return 'she';
      case 'no-preference':
      default:
        return 'they';
    }
  }
});