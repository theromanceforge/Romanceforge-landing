const storyTree = {
  "start": {
    "narrative": "Beneath the Gunmetal Sky\n\nChapter One: Reunion Under Fire\n\n\nThe war-torn city of Valthorne sprawled beneath a gunmetal sky, its once-proud skyline now a jagged ruin pierced by columns of smoke. The relentless thunder of artillery had echoed for three years since the conflict erupted in 2022, a constant reminder of the devastation that surrounded me. The air carried the acrid scent of gunpowder, mingled with the distant groans of collapsing buildings and the chill of a winter that refused to relent.\n\n\nI, a seasoned soldier and former reconnaissance officer, crouched behind a crumbling wall in the shattered district of Oldtown. The weight of my battered rifle pressed heavily against my shoulder, its cold metal a stark contrast to the warmth of memories that lingered. The despair of a population reduced to shadows hung thick, their silent pleas etched into the rubble around me.\n\n\nI once led an elite unit, forging bonds of trust and love with you, my second-in-command, until a mission to expose a traitor within our ranks went catastrophically wrong, scattering us across the battlefield and burying our romance under the weight of survival. That mission, launched in the spring of 2023, ended in betrayal, leaving me to wonder if I’d ever see you again amidst the chaos.\n\n\nThen you appeared, emerging from the choking haze that cloaked Valthorne’s ruins. Your uniform hung tattered and blood-stained, your face streaked with dirt and a resolve hardened by years of relentless fighting. The sight of you stirred something deep within me, a mix of relief and pain I couldn’t suppress.\n\n\nYour eyes locked with mine, a flicker of recognition cutting through the war’s chaos. It rekindled memories of stolen moments—your laughter echoing in a quiet bunker, your gentle touch during a rare ceasefire in the fall of 2023, the love we buried to protect our unit from further division.\n\n\n\"[MyName],\" you whispered, your voice hoarse from shouting orders, stepping closer despite the whistle of bullets overhead.\n\n\"I thought you were dead.\"\n\n\nI froze, my heart pounding as those memories flooded back, each one a dagger of longing and regret. The weight of our past pressed down, urging me to reach out yet hold back.\n\n\n\"Not yet,\" I replied, my voice tight with emotion.\n\n\"But we’re both running out of time, with the enemy closing in and the truth still hidden beneath this war’s ashes.\"\n\n\nYou nodded, your gaze steady, the unspoken bond between us reigniting amidst the staccato of gunfire.\n\n\nThe air grew heavy as a shell whistled overhead, its explosion shaking the ground beneath my feet. The blast sent a cloud of dust into the air, a stark reminder of the peril that surrounded us. This reunion felt too deliberate, too timed, sparked by whispers of a conspiracy tying our past betrayal to the war’s darkest secrets.\n\n\nYour presence hinted that you knew more than I did—perhaps the identity of the traitor who doomed our unit, a secret buried in the smoke and blood of Valthorne.\n\n\nThe choice was mine to make—trust you again, risking the fragile hope that flickered in my chest, or face the enemy alone in this desolate warzone where every shadow hid a threat.\n\n",
    "choices": [
      {"text": "Embrace you and rekindle the past with cautious hope.", "next": "dynamic"},
      {"text": "Question you about the conspiracy with guarded suspicion.", "next": "dynamic"},
      {"text": "Prepare to fight, ignoring you to focus on survival.", "next": "dynamic"}
    ]
  }
  // Dynamic branches will be generated by AI
};

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('story-setup-form');
  if (form) {
    form.addEventListener('submit', (event) => {
      event.preventDefault();
      try {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        console.log('Form data submitted:', data); // Debug log for perspective
        localStorage.setItem('storyConfig', JSON.stringify(data));
        sessionStorage.setItem('currentNode', 'start');
        window.location.href = 'engine_latest.html';
      } catch (error) {
        console.error('Error processing form:', error);
        alert('Something went wrong. Please try again.');
      }
    });
  }

  const storyContent = document.getElementById('story-content');
  const choicesDiv = document.getElementById('choices');

  if (storyContent && choicesDiv) {
    const config = JSON.parse(localStorage.getItem('storyConfig') || '{}');
    let currentNode = sessionStorage.getItem('currentNode') || 'start';
    let storyState = JSON.parse(sessionStorage.getItem('storyState') || '{}');

    // Immediate render on load with fallback
    if (!config || Object.keys(config).length === 0) {
      storyContent.innerHTML = '<p>No story configuration found. Please set up your adventure on the setup page.</p>';
      choicesDiv.innerHTML = '';
    } else {
      console.log('Rendering node with config:', config); // Debug log for config
      renderNode(currentNode, config, storyState);
    }

    choicesDiv.addEventListener('click', (event) => {
      if (event.target.tagName === 'BUTTON') {
        const next = event.target.dataset.next;
        const choiceText = event.target.textContent;
        console.log('Button clicked, next node:', next, 'Choice:', choiceText); // Debug log
        sessionStorage.setItem('currentNode', next);
        choicesDiv.innerHTML = ''; // Clear choices immediately
        generateDynamicNode(next, config, choiceText); // Generate new content
      }
    });
  }

  function renderNode(nodeId, config, storyState) {
    const node = storyTree[nodeId] || { narrative: storyState.narrative || 'No narrative available.', choices: [] };
    let narrative = node.narrative;
    let myName = 'Dorian';
    let yourName = 'Anne';
    let myPronoun = 'he';
    let myPossessivePronoun = 'his';
    let yourPronoun = 'she';
    let yourPossessivePronoun = 'her';

    if (config['perspective'] === 'anne') {
      myName = 'Anne';
      yourName = 'Dorian';
      myPronoun = 'she';
      myPossessivePronoun = 'her';
      yourPronoun = 'he';
      yourPossessivePronoun = 'his';
    }

    narrative = narrative.replace('[MyName]', myName);
    narrative = narrative.replace(/I/g, myPronoun)
                        .replace(/me/g, myPronoun === 'he' ? 'him' : myPronoun === 'she' ? 'her' : 'them')
                        .replace(/my/g, myPossessivePronoun)
                        .replace(/you/g, yourName)
                        .replace(/your/g, yourPossessivePronoun);

    // Split narrative into words for typing effect
    const words = narrative.split(' ');
    storyContent.innerHTML = ''; // Clear previous content
    let index = 0;
    choicesDiv.style.display = 'none'; // Hide choices initially

    function typeNextWord() {
      if (index < words.length) {
        const span = document.createElement('span');
        span.textContent = words[index] + ' ';
        span.style.opacity = '0';
        span.style.transition = 'opacity 0.5s';
        storyContent.appendChild(span);
        setTimeout(() => {
          span.style.opacity = '1';
        }, 10); // Smooth fade-in
        index++;
        setTimeout(typeNextWord, 200); // 200ms per word
      } else {
        // Show choices only after all words are typed
        choicesDiv.style.display = 'block';
        if (node.choices && node.choices.length > 0) {
          console.log('Rendering choices:', node.choices); // Debug log
          renderChoices(node.choices);
        } else {
          console.error('No choices available for node:', nodeId);
        }
      }
    }

    typeNextWord();
  }

  function renderChoices(choices) {
    choicesDiv.innerHTML = '';
    if (choices && choices.length > 0) {
      choices.forEach((choice, idx) => {
        let buttonText = choice.text;
        if (config['perspective'] === 'anne') {
          buttonText = buttonText.replace('you', 'Dorian');
        } else {
          buttonText = buttonText.replace('you', 'Anne');
        }
        const button = document.createElement('button');
        button.textContent = buttonText;
        button.dataset.next = choice.next;
        button.classList.add('choice-button');
        button.style.background = 'linear-gradient(90deg, #4a1a1a, #8a2b2b)';
        button.style.padding = '1.2rem 2rem';
        button.style.margin = '0.5rem 0';
        button.style.border = 'none';
        button.style.borderRadius = '10px';
        button.style.color = '#e0c0c0';
        button.style.fontSize = '1.2rem';
        button.style.cursor = 'pointer';
        button.style.transition = 'transform 0.3s, box-shadow 0.3s';
        button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
        button.onmouseover = () => {
          button.style.transform = 'scale(1.05)';
          button.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.5)';
        };
        button.onmouseout = () => {
          button.style.transform = 'scale(1)';
          button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
        };
        choicesDiv.appendChild(button);
      });
    } else {
      console.error('Choices array is empty or undefined');
    }
  }

  function generateDynamicNode(nodeId, config, previousChoice) {
    console.log('Generating dynamic node for:', nodeId, 'with choice:', previousChoice); // Debug log
    // Simulate AI generation (using Grok's capabilities)
    const riskLevel = config['emotional-risk'] || 'medium';
    let protagonist = 'Dorian';
    let partner = 'Anne';
    let protagonistPronoun = 'he';
    let protagonistPossessivePronoun = 'his';
    let partnerPronoun = 'she';
    let partnerPossessivePronoun = 'her';

    if (config['perspective'] === 'anne') {
      protagonist = 'Anne';
      partner = 'Dorian';
      protagonistPronoun = 'she';
      protagonistPossessivePronoun = 'her';
      partnerPronoun = 'he';
      partnerPossessivePronoun = 'his';
    }

    let narrative = '';
    let choices = [];

    if (nodeId === 'dynamic') {
      switch (previousChoice) {
        case 'Embrace you and rekindle the past with cautious hope.':
          narrative = `${protagonistPronoun} pull ${partner} into a tight embrace, the war fading as memories of ${protagonistPossessivePronoun} past love resurface.\n\n${partnerPronoun} tense, whispering ${protagonist} name, torn between joy and fear.\n\nBut a shell explodes nearby, shattering the moment.`;
          choices = [
            {"text": `Hold ${partner} tighter with ${riskLevel === 'raw' ? 'fierce' : 'gentle'} resolve.`, "next": "dynamic"},
            {"text": `Push ${partner} to safety with ${riskLevel === 'raw' ? 'urgent' : 'cautious'} care.`, "next": "dynamic"},
            {"text": `Draw ${protagonistPronoun} weapon with ${riskLevel === 'raw' ? 'bold' : 'steady'} intent.`, "next": "dynamic"}
          ];
          break;
        case 'Question you about the conspiracy with guarded suspicion.':
          narrative = `${protagonistPronoun} step forward, eyeing ${partner} warily.\n\n\"What do you know about this war?\" ${protagonist} demand, voice low.\n\n${partnerPronoun} hesitate, ${partnerPossessivePronoun} expression darkening with secrets.`;
          choices = [
            {"text": `Press ${partner} harder with ${riskLevel === 'raw' ? 'intense' : 'firm'} scrutiny.`, "next": "dynamic"},
            {"text": `Wait for ${partnerPronoun} response with ${riskLevel === 'raw' ? 'edgy' : 'patient'} silence.`, "next": "dynamic"},
            {"text": `Threaten to leave with ${riskLevel === 'raw' ? 'harsh' : 'calm'} resolve.`, "next": "dynamic"}
          ];
          break;
        case 'Prepare to fight, ignoring you to focus on survival.':
          narrative = `${protagonist} raise ${protagonistPronoun} rifle, scanning the ruins.\n\n${partner} call out, but ${protagonistPronoun} block ${partnerPronoun} out, heart hardened by survival.\n\nEnemy shadows emerge from the smoke.`;
          choices = [
            {"text": `Engage the enemy with ${riskLevel === 'raw' ? 'reckless' : 'focused'} fury.`, "next": "dynamic"},
            {"text": `Signal ${partner} to join with ${riskLevel === 'raw' ? 'sharp' : 'cautious'} command.`, "next": "dynamic"},
            {"text": `Retreat with ${riskLevel === 'raw' ? 'defiant' : 'strategic'} haste.`, "next": "dynamic"}
          ];
          break;
      }
    } else {
      narrative = storyTree[nodeId]?.narrative || `The story with ${partner} continues in unexpected ways...`;
      choices = storyTree[nodeId]?.choices || [
        {"text": `Explore a new path with ${riskLevel === 'raw' ? 'bold' : 'curious'} intent.`, "next": "dynamic"},
        {"text": `Retreat with ${riskLevel === 'raw' ? 'cautious' : 'hesitant'} care.`, "next": "dynamic"},
        {"text": `Charge ahead with ${riskLevel === 'raw' ? 'fierce' : 'determined'} resolve.`, "next": "dynamic"}
      ];
    }

    // Store the generated state
    const newState = { narrative, choices };
    storyState = { ...storyState, ...newState };
    sessionStorage.setItem('storyState', JSON.stringify(storyState));
    console.log('New state generated:', newState); // Debug log
    renderNode(nodeId, config, storyState);
  }

  function getPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'his';
      case 'female':
        return 'her';
      case 'no-preference':
      default:
        return 'their';
    }
  }

  function getSubjectPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'he';
      case 'female':
        return 'she';
      case 'no-preference':
      default:
        return 'they';
    }
  }

  function getPossessivePronoun(gender) {
    switch (gender) {
      case 'male':
        return 'his';
      case 'female':
        return 'her';
      case 'no-preference':
      default:
        return 'their';
    }
  }
});