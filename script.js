const storyTree = {
  "start": {
    "narrative": "Beneath the Gunmetal Sky\n\nChapter One: Reunion Under Fire\n\nThe city lay in ruins beneath a gunmetal sky, its jagged skyline pierced by smoke and the distant thunder of artillery.\n\n[protagonist-name] crouched behind a crumbling wall, the weight of a rifle heavy against [protagonist-name-pronoun] shoulder, the air thick with the scent of gunpowder and despair.\n\nThen [partner-name] appeared, emerging from the haze, [partner-gender-pronoun] uniform tattered, [partner-gender-pronoun] face streaked with dirt and resolve.\n\n[partner-name-pronoun] eyes locked with [protagonist-name-pronoun], a flicker of recognition cutting through the war’s chaos.\n\n\"[protagonist-name],\" [partner-name] whispered, voice hoarse, stepping closer despite the danger.\n\n\"I thought you were dead.\"\n\n[protagonist-name] froze, [protagonist-name-pronoun] heart pounding as memories of their last mission flooded back—[partner-name-pronoun] laughter, [partner-gender-pronoun] touch, the love they’d buried under orders.\n\n\"Not yet,\" [protagonist-name] replied, voice tight.\n\n\"But we’re both running out of time.\"\n\n[partner-name] nodded, [partner-gender-pronoun] gaze steady, the unspoken bond between them reigniting amidst the gunfire.\n\nThis reunion was no accident.\n\nA conspiracy loomed, tying their past to the war’s darkest secrets, and [partner-name-pronoun] presence suggested [partner-name-pronoun] knew more than [protagonist-name-pronoun] did.\n\nThe choice was [protagonist-name-pronoun] to make—trust [partner-name] again or face the enemy alone.",
    "choices": [
      {"text": "Embrace [partner-name] and rekindle the past with cautious hope.", "next": "dynamic"},
      {"text": "Question [partner-name] about the conspiracy with guarded suspicion.", "next": "dynamic"},
      {"text": "Prepare to fight, ignoring [partner-name] to focus on survival.", "next": "dynamic"}
    ]
  }
  // Dynamic branches will be generated by AI
};

document.addEventListener('DOMContentLoaded', () => {
  const form = document.getElementById('story-setup-form');
  if (form) {
    form.addEventListener('submit', (event) => {
      event.preventDefault();
      try {
        const formData = new FormData(form);
        const data = Object.fromEntries(formData);
        localStorage.setItem('storyConfig', JSON.stringify(data));
        sessionStorage.setItem('currentNode', 'start');
        window.location.href = 'engine_latest.html';
      } catch (error) {
        console.error('Error processing form:', error);
        alert('Something went wrong. Please try again.');
      }
    });
  }

  const storyContent = document.getElementById('story-content');
  const choicesDiv = document.getElementById('choices');

  if (storyContent && choicesDiv) {
    const config = JSON.parse(localStorage.getItem('storyConfig') || '{}');
    let currentNode = sessionStorage.getItem('currentNode') || 'start';
    let storyState = JSON.parse(sessionStorage.getItem('storyState') || '{}');

    // Immediate render on load with fallback
    if (!config || Object.keys(config).length === 0) {
      storyContent.innerHTML = '<p>No story configuration found. Please set up your adventure on the setup page.</p>';
      choicesDiv.innerHTML = '';
    } else {
      renderNode(currentNode, config, storyState);
    }

    choicesDiv.addEventListener('click', (event) => {
      if (event.target.tagName === 'BUTTON') {
        const next = event.target.dataset.next;
        const choiceText = event.target.textContent;
        sessionStorage.setItem('currentNode', next);
        choicesDiv.innerHTML = ''; // Clear choices immediately
        generateDynamicNode(next, config, choiceText); // Generate new content
      }
    });
  }

  function renderNode(nodeId, config, storyState) {
    const node = storyTree[nodeId] || { narrative: storyState.narrative || 'No narrative available.', choices: [] };
    let narrative = node.narrative;
    narrative = narrative.replace('[protagonist-name]', config['protagonist-name'] || 'Traveler');
    narrative = narrative.replace('[partner-name]', config['partner-name'] || 'Partner');
    narrative = narrative.replace('[partner-gender-pronoun]', getPronoun(config['partner-gender'] || 'no-preference'));
    narrative = narrative.replace('[partner-name-pronoun]', getSubjectPronoun(config['partner-gender'] || 'no-preference'));
    narrative = narrative.replace('[protagonist-name-pronoun]', getSubjectPronoun(config['protagonist-gender'] || 'no-preference'));

    // Split narrative into words for typing effect
    const words = narrative.split(' ');
    storyContent.innerHTML = ''; // Clear previous content
    let index = 0;
    choicesDiv.style.display = 'none'; // Hide choices initially

    function typeNextWord() {
      if (index < words.length) {
        const span = document.createElement('span');
        span.textContent = words[index] + ' ';
        span.style.opacity = '0';
        span.style.transition = 'opacity 0.5s';
        storyContent.appendChild(span);
        setTimeout(() => {
          span.style.opacity = '1';
        }, 10); // Smooth fade-in
        index++;
        setTimeout(typeNextWord, 200); // 200ms per word
      } else {
        // Show choices only after all words are typed
        choicesDiv.style.display = 'block';
        renderChoices(node.choices);
      }
    }

    typeNextWord();
  }

  function renderChoices(choices) {
    choicesDiv.innerHTML = '';
    choices.forEach((choice, idx) => {
      const button = document.createElement('button');
      button.textContent = choice.text;
      button.dataset.next = choice.next;
      button.classList.add('choice-button');
      button.style.background = 'linear-gradient(90deg, #4a1a1a, #8a2b2b)';
      button.style.padding = '1.2rem 2rem';
      button.style.margin = '0.5rem 0';
      button.style.border = 'none';
      button.style.borderRadius = '10px';
      button.style.color = '#e0c0c0';
      button.style.fontSize = '1.2rem';
      button.style.cursor = 'pointer';
      button.style.transition = 'transform 0.3s, box-shadow 0.3s';
      button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
      button.onmouseover = () => {
        button.style.transform = 'scale(1.05)';
        button.style.boxShadow = '0 6px 12px rgba(0, 0, 0, 0.5)';
      };
      button.onmouseout = () => {
        button.style.transform = 'scale(1)';
        button.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.4)';
      };
      choicesDiv.appendChild(button);
    });
  }

  function generateDynamicNode(nodeId, config, previousChoice) {
    // Simulate AI generation (using Grok's capabilities)
    const riskLevel = config['emotional-risk'] || 'medium';
    const protagonist = config['protagonist-name'] || 'Traveler';
    const partner = config['partner-name'] || 'Partner';
    let pronoun = getPronoun(config['partner-gender'] || 'no-preference');
    let subjectPronoun = getSubjectPronoun(config['partner-gender'] || 'no-preference');
    let protagonistPronoun = getSubjectPronoun(config['protagonist-gender'] || 'no-preference');
    let narrative = '';
    let choices = [];

    if (nodeId === 'dynamic') {
      switch (previousChoice) {
        case 'Embrace [partner-name] and rekindle the past with cautious hope.':
          narrative = `${protagonistPronoun} pull ${partner} into a tight embrace, the war fading as memories of [protagonist-name-pronoun] past love resurface.\n\n${subjectPronoun} tense, whispering [protagonist-name-pronoun] name, torn between joy and fear.\n\nBut a shell explodes nearby, shattering the moment.`;
          choices = [
            {"text": `Hold ${partner} tighter with ${riskLevel === 'raw' ? 'fierce' : 'gentle'} resolve.`, "next": "dynamic"},
            {"text": `Push ${partner} to safety with ${riskLevel === 'raw' ? 'urgent' : 'cautious'} care.`, "next": "dynamic"},
            {"text": `Draw [protagonist-name-pronoun] weapon with ${riskLevel === 'raw' ? 'bold' : 'steady'} intent.`, "next": "dynamic"}
          ];
          break;
        case 'Question [partner-name] about the conspiracy with guarded suspicion.':
          narrative = `${protagonistPronoun} step forward, eyeing ${partner} warily.\n\n\"What do you know about this war?\" ${protagonist} demand, voice low.\n\n${subjectPronoun} hesitate, [partner-gender-pronoun] expression darkening with secrets.`;
          choices = [
            {"text": `Press ${partner} harder with ${riskLevel === 'raw' ? 'intense' : 'firm'} scrutiny.`, "next": "dynamic"},
            {"text": `Wait for [partner-name-pronoun] response with ${riskLevel === 'raw' ? 'edgy' : 'patient'} silence.`, "next": "dynamic"},
            {"text": `Threaten to leave with ${riskLevel === 'raw' ? 'harsh' : 'calm'} resolve.`, "next": "dynamic"}
          ];
          break;
        case 'Prepare to fight, ignoring [partner-name] to focus on survival.':
          narrative = `${protagonist} raise [protagonist-name-pronoun] rifle, scanning the ruins.\n\n${partner} call out, but ${protagonistPronoun} block [partner-name-pronoun] out, heart hardened by survival.\n\nEnemy shadows emerge from the smoke.`;
          choices = [
            {"text": `Engage the enemy with ${riskLevel === 'raw' ? 'reckless' : 'focused'} fury.`, "next": "dynamic"},
            {"text": `Signal ${partner} to join with ${riskLevel === 'raw' ? 'sharp' : 'cautious'} command.`, "next": "dynamic"},
            {"text": `Retreat with ${riskLevel === 'raw' ? 'defiant' : 'strategic'} haste.`, "next": "dynamic"}
          ];
          break;
      }
    } else {
      narrative = storyTree[nodeId]?.narrative || `The story with ${partner} continues in unexpected ways...`;
      choices = storyTree[nodeId]?.choices || [
        {"text": `Explore a new path with ${riskLevel === 'raw' ? 'bold' : 'curious'} intent.`, "next": "dynamic"},
        {"text": `Retreat with ${riskLevel === 'raw' ? 'cautious' : 'hesitant'} care.`, "next": "dynamic"},
        {"text": `Charge ahead with ${riskLevel === 'raw' ? 'fierce' : 'determined'} resolve.`, "next": "dynamic"}
      ];
    }

    // Store the generated state
    const newState = { narrative, choices };
    storyState = { ...storyState, ...newState };
    sessionStorage.setItem('storyState', JSON.stringify(storyState));
    renderNode(nodeId, config, storyState);
  }

  function getPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'his';
      case 'female':
        return 'her';
      case 'no-preference':
      default:
        return 'their';
    }
  }

  function getSubjectPronoun(gender) {
    switch (gender) {
      case 'male':
        return 'he';
      case 'female':
        return 'she';
      case 'no-preference':
      default:
        return 'they';
    }
  }
});